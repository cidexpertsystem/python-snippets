A series of short coding tasks written in python. All code written by Cindy Reichel.

addBorder.py:
Given a rectangular matrix of characters, add a border of asterisks(*) to it.

alphabeticShift.py:
Given a string, replace each its character by the next one
in the English alphabet (z would be replaced by a).

alternatingSums.py:
Several people are standing in a row and need to be divided into two teams.
The first person goes into team 1, the second goes into team 2, the
third goes into team 1 again, the fourth into team 2, and so on.
You are given an array of positive integers - the weights of the people.
Return an array of two integers, where the first element is the total weight
of team 1, and the second element is the total weight of team 2 after the division is complete.

areEquallyStrong.py:
Call two arms equally strong if the heaviest weights they each are able to lift are equal.
Call two people equally strong if their strongest arms are equally strong
(the strongest arm can be both the right and the left), and so are their weakest arms.
Given your and your friend's arms' lifting capabilities find out if you two are equally strong.

areSimilar.py:
Two arrays are called similar if one can be obtained from another by
swapping at most one pair of elements in one of the arrays.
Given two arrays a and b, check whether they are similar.
Two arrays are called similar if one can be obtained from
another by swapping at most one pair of elements in one of the arrays.
Given two arrays a and b, check whether they are similar.
First, the sorted arrays have to match or else they can't be similar
the number of differences has to be 2 to pass

arrayMaximalAdjacentDifference.py:
Given an array of integers, find the maximal absolute difference
between any two of its adjacent elements.

arrayReplace.py:
Given an array of integers, replace all the occurrences
of elemToReplace with substitutionElem.

avoidObstacles.py:
You are given an array of integers representing coordinates of obstacles
situated on a straight line. Assume that you are jumping from the point with coordinate 0 to the right.
You are allowed only to make jumps of the same length represented by some integer.
Find the minimal length of the jump enough to avoid all the obstacles.

boxBlur.py:
The pixels in an input image are represented as integers.
This algorithm distorts the input image in the following way:
Every pixel x in the output image has a value equal to the average
value of the pixel values from the 3 Ã— 3 square that has its center at x,
including x itself. All the pixels on the border of x are then removed.
Return the blurred image as an integer, with the fractions rounded down.

chessBoardCellColor.py:
Given two cells on the standard chess board,
determine whether they have the same color or not.

circleOfNumbers.py:
Consider integer numbers from 0 to n - 1 written down along the circle
in such a way that the distance between any two neighboring numbers is
equal (note that 0 and n - 1 are neighboring, too).
Given n and firstNumber, find the number which is written in
the radially opposite position to firstNumber.

commonCharacterCount.py:
Given two strings, find the number of common characters between them.

containsCloseNums.py:
Scan sorted array to see if every number is unique
If there are duplicates, use dictionary to find them

depositProfit.py:
You have deposited a specific amount of dollars into your bank account.
Each year your balance increases at the same growth rate.
Find out how long it would take for your balance to pass a specific
threshold with the assumption that you don't make any additional deposits.

evenDigitsOnly.py:
Check if all digits of the given integer are even.

isIPv4Address.py:
An IP address is a numerical label assigned to each device (e.g., computer, printer)
participating in a computer network that uses the Internet Protocol for communication.
There are two versions of the Internet protocol, and thus two versions of addresses.
One of them is the IPv4 address.
IPv4 addresses are represented in dot-decimal notation, which consists of four
decimal numbers, each ranging from 0 to 255 inclusive, separated by dots, e.g., 172.16.254.1.
Given a string, find out if it satisfies the IPv4 address naming rules.

isLucky.py:
Ticket numbers usually consist of an even number of digits.
A ticket number is considered lucky if the sum of the first half
of the digits is equal to the sum of the second half.
Given a ticket number n, determine if it's lucky or not.

minesweeper.py:
In the popular Minesweeper game you have a board with some mines and
those cells that don't contain a mine have a number in it that indicates
the total number of mines in the neighboring cells.
Starting off with some arrangement of mines, create
a minesweeper game setup.

palindromeRearranging.py:
Given a string, find out if its characters can be rearranged to form a palindrome.

reverseParentheses.py:
You have a string s that consists of English letters, punctuation marks,
whitespace characters, and brackets. It is guaranteed that the parentheses
in s form a regular bracket sequence.
Your task is to reverse the strings contained in each pair of matching parentheses,
starting from the innermost pair. The results string should not contain any parentheses.
reverse the strings contained in each pair of matching parentheses,
starting from the innermost pair. The results string should not contain any parentheses.

sortByHeight.py:
Some people are standing in a row in a park. There are trees between
them which cannot be moved. Your task is to rearrange the people by
their heights in a non-descending order without moving the trees.
rearrange elements other than -1 without moving the -1 positions

variableName.py:
Correct variable names consist only of English letters,
digits and underscores and they can't start with a digit.
Check if the given string is a correct variable name.
